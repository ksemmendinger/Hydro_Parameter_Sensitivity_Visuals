combined_duration_data.df$propertyfeature <- reorder(combined_duration_data.df$propertyfeature,
duration_freq_array, sum)
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(3, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
source('~/Documents/Cornell/Survey/Survey Responses.R', echo=TRUE)
ock_freq <- table(ws$Q69_1)
lawn_freq <- table(ws$Q69_2)
landscaping_freq <- table(ws$Q69_3)
outbuilding_freq <- table(ws$Q69_4)
utility_freq <- table(ws$Q69_5)
foundation_freq <- table(ws$Q69_6)
firstfloor_freq <- table(ws$Q69_7)
other_freq <- table(ws$Q69_8)
duration_freq_table <- cbind(dock_freq, lawn_freq, landscaping_freq, outbuilding_freq,
utility_freq, foundation_freq, firstfloor_freq, other_freq)
duration_freq_table
duration_freq_array <- as.vector(duration_freq_table) #convert matrix to vector array
duration_freq_array
propertyfeature_duration <- c(rep("Dock" , 6) , rep("Lawn" , 6) , rep("Landscaping" , 6) ,
rep("Outbuilding" , 6), rep("Utility" , 6) ,
rep("Foundation" , 6) , rep("First Floor" , 6) , rep("Other" , 6) )
duration <- rep(c("Unknown" , "< 1 hour" , "1 hour - 1 day", "1 day - 1 week",
"1 week - 1 month", "> 1 month") , 8)
combined_duration_data.df = data.frame(propertyfeature_duration, duration, duration_freq_array)
combined_duration_data.df$propertyfeature <- reorder(combined_duration_data.df$propertyfeature,
duration_freq_array, sum)
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = duration,
x = propertyfeature_duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
propertyfeature_duration
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
duration_freq_array <- as.vector(duration_freq_table) #convert matrix to vector array
duration_freq_array
propertyfeature_duration <- c(rep("Dock" , 6) , rep("Lawn" , 6) , rep("Landscaping" , 6) ,
rep("Outbuilding" , 6), rep("Utility" , 6) ,
rep("Foundation" , 6) , rep("First Floor" , 6) , rep("Other" , 6) )
duration <- rep(c("Unknown" , "< 1 hour" , "1 hour - 1 day", "1 day - 1 week",
"1 week - 1 month", "> 1 month") , 8)
combined_duration_data.df = data.frame(propertyfeature_duration, duration, duration_freq_array)
combined_duration_data.df$duration <- reorder(combined_duration_data.df$duration,
duration_freq_array, sum)
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
combined_duration_data.df = data.frame(propertyfeature_duration, duration, duration_freq_array)
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
#using ggplot to graph
ggplot(inun_prop_features, aes(fill = condition,
x = propertyfeature,
y = damage_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(3, "Pastel2")) +
ggtitle("Inundation of Individual Property Features") +
labs(x = "Property Feature", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=wes_palette(8, "Rushmore")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
brewer.pal
#using ggplot to graph
ggplot(combined_duration_data.df, aes(fill = propertyfeature_duration,
x = duration,
y = duration_freq_array)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=brewer.pal(8, "Pastel2")) +
ggtitle("Duration of Inundation of Individual Property Features") +
labs(x = "Duration of Inundation", y = "Frequency of Response") +
theme(axis.title = element_text(face = "bold.italic", size = "12", color = "black"),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = "13", color = "black", hjust = .5))
#Q2 vs Q67 - a comparison of survey response location and overall impact
boxplot(ws$Q67 ~ ws$Q2_A, #plotting overall impact score by location
ylim = c(0,10),
las = 2, #rotated x- and y-axis labels
main = "Overall Impact of 2017 Water Event by Location",
xlab = "Location",
ylab = "Severity of Overall Impact",
col = c("lightcyan1", "lightcyan2", "lightcyan3", "lightcyan4"),
cex.axis = .5,
cex.main = .75,
cex.lab = .75)
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
overall_impact_location
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
overall_impact_location
ggplot(overall_impact_location, aes(x = ws.Q2_A, y = ws.Q67)) + geom_boxplot()
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
overall_impact_location <- reorder(overall_impact_location$ws.Q2_A, overall_impact_location$ws.Q67, sum)
overall_impact_location
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
overall_impact_location <- reorder(overall_impact_location$ws.Q2_A, overall_impact_location$ws.Q67, sum)
overall_impact_location
ggplot(overall_impact_location, aes(x = ws.Q2_A, y = ws.Q67)) + geom_boxplot()
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
overall_impact_location <- reorder(overall_impact_location$ws.Q2_A, overall_impact_location$ws.Q67, sum)
overall_impact_location <- data.frame(overall_impact_location)
ggplot(overall_impact_location, aes(x = ws.Q2_A, y = ws.Q67)) + geom_boxplot()
ggplot(overall_impact_location, aes(x = ws.Q2_A, y = ws.Q67)) + geom_boxplot()
#create data set
overall_impact_location = data.frame(ws$Q2_A, ws$Q67)
ggplot(overall_impact_location, aes(x = ws.Q2_A, y = ws.Q67)) + geom_boxplot()
location_freq <- table(ws$Q2_A)
overall_impact_location = data.frame(ws$Q2_A, location_freq, ws$Q67)
overall_impact_location = data.frame(ws$Q2_A, location_freq, ws$Q67)
location_freq
x <- as.matrix(c(6, 6, 6, 18), nrow = 2)
X
x
x <- as.matrix(c(6, 6, 6, 18), nrow = 2, ncol = 2)
x <- as.matrix(c(6, 6), c(6, 18), nrow = 2, ncol = 2)
x <- as.matrix(c(c(6, 6), c(6, 18)), nrow = 2, ncol = 2)
matrix(nrow=2, ncol=2)
x<-matrix(nrow=2, ncol=2)
x[1,1] <- 6
x[1,2] <- 6
x[2,1] <- 6
x[2,2] <- 18
x
solve(x)
helloworld <- function(x) {
print("The PPC is the best hydroinformatics team!!")
}
helloworld()
library(dplyr)
# Find time to drain to h = 10 cm if Qin = 0
Dbottom <- 1 / 100 # cm -> m
h0 <- 25 / 100 # cm -> m
Qin <- 0
rm(list=ls())
# set initial conditions
outlet_diameter <- 1 / 100 # cm -> m
gravity <- 9.81 # m/s^2
Cd <- 1 # for water
funnel_angle <- 45 # degrees
pi
dt <- #seconds
time_now <- # seconds
volume_now <- # m^3
dv <- # m^3
outlet_area <- (pi / 4) * outlet_diameter ^ 2
outlet_area
C1 <- - (Cd * outlet_area * sqrt(2 * gravity)
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
rm(list=ls())
outlet_diameter <- 1 / 100 # cm -> m
Cd <- 1 # for water
funnel_angle <- 45 # degrees
gravity <- 9.81 # m/s^2
initial_height <- 25 / 100 # cm -> m
final_height <- 10 / 100 # cm -> m
initial_diameter <- initial_height
outlet_area <- (pi / 4) * outlet_diameter ^ 2 # m^2
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
Q_in <- 0 # m^3 / s
?while
outlet_tip_height <- outlet_diameter # m
Q_in <- 0 # m^3 / s
initial_height <- 25 / 100 # cm -> m
final_height <- 10 / 100 # cm -> m
initial_diameter <- initial_height
volume_tip <- (1/3) * pi * (outlet_diameter / 2) ^ 2 * outlet_tip_height
initial_volume <- (1/3) * pi * (initial_diameter / 2) ^ 2 * initial_height - volume_tip # m^3
initial_volume
volume_tip
dt <- 1 #seconds
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
outlet_diameter <- 1 / 100 # cm -> m
outlet_tip_height <- outlet_diameter # m
Cd <- 1 # for water
funnel_angle <- 45 # degrees
gravity <- 9.81 # m / s^2
outlet_area <- (pi / 4) * outlet_diameter ^ 2 # m^2
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
# initial conditions
Q_in <- 0 # m^3 / s
initial_height <- 25 / 100 # cm -> m
final_height <- 10 / 100 # cm -> m
initial_diameter <- initial_height # m
volume_tip <- (1/3) * pi * (outlet_diameter / 2) ^ 2 * outlet_tip_height # m^3
initial_volume <- (1/3) * pi * (initial_diameter / 2) ^ 2 * initial_height - volume_tip # m^3
dt <- 1 #seconds
# do explicit, forward Euler solution of the differential equation
dv <- Q_out * dt
dv
time_now <- 0 # seconds
time_now
# do explicit, forward Euler solution of the differential equation
time_now <- time_now + dt
time_now
time_now <- 0 # seconds
dt <- 1 #seconds
time_now
# do explicit, forward Euler solution of the differential equation
time_now <- time_now + dt
dv <- Q_out * dt # m^3
dv
volume_now <- (1/3) * pi * (initial_diameter / 2) ^ 2 * initial_height - volume_tip # m^3
volume_now <- volume_now - dv
volume_now
h <- initial_height
water_surface_area <- (pi / 4) * (initial_diameter) ^2# m^2
water_surface_area
count <- 0
count <- count + 1
count
rm(list=ls())
# constants
outlet_diameter <- 1 / 100 # cm -> m
outlet_tip_height <- outlet_diameter # m
Cd <- 1 # for water
funnel_angle <- 45 # degrees
gravity <- 9.81 # m / s^2
outlet_area <- (pi / 4) * outlet_diameter ^ 2 # m^2
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
# initial conditions
Q_in <- 0 # m^3 / s
initial_height <- 25 / 100 # cm -> m
final_height <- 10 / 100 # cm -> m
initial_diameter <- initial_height # m
volume_tip <- (1/3) * pi * (outlet_diameter / 2) ^ 2 * outlet_tip_height # m^3
volume_now <- (1/3) * pi * (initial_diameter / 2) ^ 2 * initial_height - volume_tip # m^3
time_now <- 0 # seconds
water_surface_area <- (pi / 4) * (initial_diameter) ^ 2# m^2
dt <- 1 # seconds
h <- initial_height # m
count <- 0
# time step loop
while (h > final_height) {
count <- count + 1
# do explicit, forward Euler solution of the differential equation
time_now <- time_now + dt
dv <- Q_out * dt # m^3
volume_now <- volume_now - dv
h <- volume_now / water_surface_area
Q_out <- -1 * C1 * sqrt(h) # m^3 / s
if (h < 0 | count > 100000) {
print("Something might be wrong...")
}
print(paste("The current time is: ", time_now,
". The current height is ", h,
". The current outflow is ", Q_out))
}
Q_out
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
Q_out
rm(list=ls())
outlet_diameter <- 1 / 100 # cm -> m
outlet_tip_height <- outlet_diameter # m
Cd <- 1 # for water
funnel_angle <- 45 # degrees
gravity <- 9.81 # m / s^2
outlet_area <- (pi / 4) * outlet_diameter ^ 2 # m^2
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
outlet_diameter <- 1 / 100 # cm -> m
outlet_tip_height <- outlet_diameter # m
Cd <- 1 # for water
funnel_angle <- 45 # degrees
gravity <- 9.81 # m / s^2
Q_in <- 0 # m^3 / s
initial_height <- 25 / 100 # cm -> m
final_height <- 10 / 100 # cm -> m
initial_diameter <- initial_height # m
volume_tip <- (1/3) * pi * (outlet_diameter / 2) ^ 2 * outlet_tip_height # m^3
volume_now <- (1/3) * pi * (initial_diameter / 2) ^ 2 * initial_height - volume_tip # m^3
time_now <- 0 # seconds
water_surface_area <- (pi / 4) * (initial_diameter) ^ 2# m^2
outlet_area <- (pi / 4) * outlet_diameter ^ 2 # m^2
C1 <- - (Cd * outlet_area * sqrt(2 * gravity))
Q_out <- -1 * C1 * sqrt(initial_height) # m^3 / s
dt <- 1 # seconds
h <- initial_height # m
count <- 0
# time step loop
while (h > final_height) {
count <- count + 1
# do explicit, forward Euler solution of the differential equation
time_now <- time_now + dt
dv <- Q_out * dt # m^3
volume_now <- volume_now - dv
h <- volume_now / water_surface_area
Q_out <- -1 * C1 * sqrt(h) # m^3 / s
if (h < 0 | count > 100000) {
print("Something might be wrong...")
}
print(paste("The current time is: ", time_now,
". The current height is ", h,
". The current outflow is ", Q_out))
}
time_now
paste("The current time is: ", time_now,
". The current height is ", h,
". The current outflow is ", Q_out)
RStudio.version()
version
remove.packages("tibble")
remove.packages(tibble)
path.expand()
library(rlang)
sessionInfo()
setwd("/Users/kylasemmendinger 1/SI_Hydroinformatics/SWMM")
library(dplyr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol)
portrait_plot(results_delta)
SI <- results_sobol
View(SI)
SI_name<-"sobol"
paste0("output/plots/portrait/", SI_name, "/", dimnames(with_conf)[[3]][1], ".png")
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
portrait_plot(results_delta, "delta")
portrait_plot(results_sobol, "sobol")
SI <- results_ols
SI_name <- "ols"
k<-1
# subset sensitivty analysis results
with_conf <- SI[[k]]
length(dim(with_conf)) == 2
value <- as.matrix(with_conf)
# write and save portrait plot
png(paste0("output/plots/portrait/", SI_name, "/ols.png"), width = 17, height = 11, units = 'in', res = 1000)
# write and save portrait plot
col <- colorRampPalette(brewer.pal(9, "PuBuGn"))
print(levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col,
main = paste0("Portrait Plot for OLS Sensitivity Analysis")))
dev.off()
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
portrait_plot(results_ols, "ols")
SI <- results_delta
SI_name <- "delta"
SI_name == "ols"
SI_name
value <- as.matrix(with_conf[, , 1])
# subset sensitivty analysis results
with_conf <- SI[[k]]
value <- as.matrix(with_conf[, , 1])
# write and save portrait plot
col <- colorRampPalette(brewer.pal(9, "PuBuGn"))
paste0("output/plots/portrait/", SI_name, "/", dimnames(with_conf)[[3]][1], ".png")
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol, "sobol")
portrait_plot(results_delta, "delta")
portrait_plot(results_ols, "ols")
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol, "sobol")
portrait_plot(results_delta, "delta")
portrait_plot(results_ols, "ols")
setwd("/Users/kylasemmendinger 1/SI_Hydroinformatics/TOPMODEL")
rm(list=ls())
# load in parameter sets, objective functions, observation, simulation, and time steps
pars <- read.csv("input/params.csv", header = TRUE)
OF <- read.csv("input/OF_values.csv", header = TRUE)
OF <- read.csv("input/OF_values.csv", header = TRUE) %>%
dplyr::select(-1)
library(dplyr)
getwd()
# load in parameter sets, objective functions, observation, simulation, and time steps
pars <- read.csv("input/params.csv", header = TRUE)
# load in parameter sets, objective functions, observation, simulation, and time steps
pars <- read.csv("input/params.csv", header = TRUE) %>%
dplyr::select(-1)
OF <- read.csv("input/OF_values.csv", header = TRUE)
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
source("../Scripts/portrait_plots.R")
portrait_plot(results_delta, "delta")
portrait_plot(results_ols, "ols")
source("../Scripts/spider_plots.R")
spiderplot(results_delta)
spiderplot(results_ols)
