row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/portrait/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
print(radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis")))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
}
}
}
portrait_plot(results_sobol)
spiderplot(results_sobol)
spiderplot(results_ols)
SI<-results_ols
k<-1
# subset sensitivty analysis results
with_conf <- SI[[k]]
value <- with_conf
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
print(radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis"))
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis")
dev.off()
spiderplot <- function(SI) {
for (k in 1:length(SI)) {
# subset sensitivty analysis results
with_conf <- SI[[k]]
# if ols then the length of the list is 2 with a different format than the Sobol/Delta analyses
if (length(dim(with_conf)) == 2) {
value <- with_conf
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis")
dev.off()
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis")
}
} else {
value <- with_conf[, , 1]
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/portrait/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
}
}
}
spiderplot(results_sobol)
SI <- results_sobol
k
n
# subset sensitivty analysis results
with_conf <- SI[[k]]
value <- with_conf[, , 1]
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/portrait/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
dimnames(with_conf)[[3]][1]
png(paste0("output/plots/portrait/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
getwd()
spiderplot <- function(SI) {
for (k in 1:length(SI)) {
# subset sensitivty analysis results
with_conf <- SI[[k]]
# if ols then the length of the list is 2 with a different format than the Sobol/Delta analyses
if (length(dim(with_conf)) == 2) {
value <- with_conf
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis")
dev.off()
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = "Portrait Plot for OLS Sensitivity Analysis")
}
} else {
value <- with_conf[, , 1]
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
}
}
}
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
portrait_plot(results_sobol)
portrait_plot(results_delta)
portrait_plot(results_ols)
colnames(value)[n]
colnames(value)[n]
toupper(colnames(value)[n])
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), "Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(min(OF), max(OF), 0.1),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), 0.1),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF) + 0.1, 0.1),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
max(OF)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF) + 0.5, 0.1),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
?seq
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF) + 0.5, length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF) + 0.1, length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for OLS Sensitivity Analysis"))
spiderplot <- function(SI) {
for (k in 1:length(SI)) {
# subset sensitivty analysis results
with_conf <- SI[[k]]
# if ols then the length of the list is 2 with a different format than the Sobol/Delta analyses
if (length(dim(with_conf)) == 2) {
value <- with_conf
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for OLS Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for OLS Sensitivity Analysis"))
}
} else {
value <- with_conf[, , 1]
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
}
}
}
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
spiderplot <- function(SI) {
for (k in 1:length(SI)) {
# subset sensitivty analysis results
with_conf <- SI[[k]]
# if ols then the length of the list is 2 with a different format than the Sobol/Delta analyses
if (length(dim(with_conf)) == 2) {
value <- with_conf
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/ols_", colnames(value)[n], ".png")) # , width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for OLS Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0.2,0.5,0.5,0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for OLS Sensitivity Analysis"))
}
} else {
value <- with_conf[, , 1]
for (n in 1:ncol(value)) {
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
# write and save spider plot
png(paste0("output/plots/spider/", dimnames(with_conf)[[3]][1], "_", colnames(value)[n], ".png"), width = 700, height = 500)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
dev.off()
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = seq(0, max(OF), length.out = 5),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
}
}
}
}
source("/Users/kylasemmendinger 1/Box Sync/CUAHSI/Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
rm(list=ls())
setwd("/Users/kylasemmendinger 1/Box Sync/CUAHSI/CaseStudy0")
setwd("/Users/kylasemmendinger 1/SI_Hydroinformatics/Case Study 0")
library(dplyr)
# load in observation, simulation, and parameter sets
obs <- read.csv("input/observation_ts.csv", header = TRUE)
# "time_steps" row, 1 column of values
sim <- read.csv("input/simulation_ts.csv", header = TRUE) %>%
dplyr::select(-1)
# "model_runs" rows, "time_steps" columns
pars <- read.csv("input/params.csv", header = FALSE)
# "model_runs" rows, "num_pars" columns
timestamps <- read.csv("input/timestamps.csv", header = TRUE)
# "time_steps" row, 1 column of values
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- c("w", "n_imperv", "n_perv", "s_imperv", "s_perv", "k_sat",
"per_routed", "cmelt", "Tb", "A1", "B1")
source("Scripts/scatterplots.R")
setwd("..")
getwd()
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("Scripts/python_to_r_results.R")
setwd("/Users/kylasemmendinger 1/SI_Hydroinformatics/Case Study 0")
source("../Scripts/python_to_r_results.R")
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
View(results_delta)
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- c("w", "n_imperv", "n_perv", "s_imperv", "s_perv", "k_sat",
"per_routed", "cmelt", "Tb", "A1", "B1")
# clean up data
obs <- array(obs[, 2])
timestamps <- array(timestamps[, 2])
colnames(pars) <- param_names
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(sim)
time_steps <- ncol(sim)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
getwd()
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
i<-1
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
i
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
library(ggplot2)
library(wesanderson)
library(gridExtra)
# create a data frame of parameter values and the objective function values
data <- params
data[, "OF"] <- objective_fun
plots <- list()
params <- pars
# create a data frame of parameter values and the objective function values
data <- params
data[, "OF"] <- objective_fun
plots <- list()
j<-1
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
OF_name <- "me"
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save to list for gridded plot
plots[[j]] <- sctplt
for (j in 1:ncol(params)) {
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[j]] <- sctplt
# paste plot to console
# print(sctplt)
}
plots
View(plots)
# save grid of parameter scatter plots for each OF
print(do.call(grid.arrange, plots))
do.call(grid.arrange, plots)
dev.copy(png, paste0("output/plots/scatter/", OF_name, ".png"))
dev.off()
getwd()
plots
grid.arrange(grobs = plots, ncol = 3)
dev.copy(png, paste0("output/plots/scatter/", OF_name, ".png"))
dev.off()
j
sqrt(ncol(params))
ceiling(sqrt(ncol(params)))
# save grid of parameter scatter plots for each OF
# do.call(grid.arrange, plots)
# dev.copy(png, paste0("output/plots/scatter/", OF_name, ".png"))
# dev.off()
x <- grid.arrange(grobs = plots, ncol = ceiling(sqrt(ncol(params))))
ggsave(paste0("output/plots/scatter/", OF_name, ".png"), x)
for (j in 1:ncol(params)) {
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[j]] <- sctplt
# paste plot to console
# print(sctplt)
}
# save grid of parameter scatter plots for each OF
# do.call(grid.arrange, plots)
# dev.copy(png, paste0("output/plots/scatter/", OF_name, ".png"))
# dev.off()
x <- grid.arrange(grobs = plots, ncol = ceiling(sqrt(ncol(params))))
ggsave(paste0("output/plots/scatter/", OF_name, ".png"), x)
print(x)
x
ggsave(paste0("output/plots/scatter/", OF_name, ".png"), x, width = 700, height = 500)
ggsave(paste0("output/plots/scatter/", OF_name, ".png"), x, width = 11, height = 8.5, units = "in")
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol)
portrait_plot(results_delta)
portrait_plot(results_ols)
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
seq(0, max(OF), length.out = 5)
round(seq(0, max(OF), length.out = 5), 2)
# spiders plots of objective functions versus parameter values
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
# spiders plots of objective functions versus parameter values
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
