# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(sim)
time_steps <- ncol(sim)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
library(dplyr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
num_pars
model_runs
num_OF
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
# subset by objective function, i
objective_fun <- OF[, i]
i<-1
# subset by objective function, i
objective_fun <- OF[, i]
library(ggplot2)
library(wesanderson)
library(gridExtra)
# create a data frame of parameter values and the objective function values
data <- params
data[, "OF"] <- objective_fun
params<-pars
# create a data frame of parameter values and the objective function values
data <- params
data[, "OF"] <- objective_fun
plots <- list()
ncol(params)
ceiling(sqrt(ncol(params)))
ncol(params)/ceiling(sqrt(ncol(params)))
cieling(ncol(params)/ceiling(sqrt(ncol(params))))
ceiling(ncol(params)/ceiling(sqrt(ncol(params))))
OF_name <- "me"
png((paste0("output/plots/scatter/", OF_name, ".png"), res = 1000))
png(paste0("output/plots/scatter/", OF_name, ".png"), res = 1000)
par(mfrow = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
for (j in 1:ncol(params)) {
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
# plots[[j]] <- sctplt
# paste plot to console
print(sctplt)
}
dev.off()
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
par(mfrow = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
for (j in 1:ncol(params)) {
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
# plots[[j]] <- sctplt
# paste plot to console
print(sctplt)
}
dev.off()
c(ceiling(sqrt(ncol(params)))
ceiling(sqrt(ncol(params)))
ceiling(ncol(params)/ceiling(sqrt(ncol(params)
)
)
ceiling(ncol(params)/ceiling(sqrt(ncol(params))))
c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params)))))
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
par(mfrow = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
# plots[[j]] <- sctplt
# paste plot to console
print(sctplt)
}
dev.off()
par=(c(4,3))
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
# plots[[j]] <- sctplt
# paste plot to console
print(sctplt)
}
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[j]] <- sctplt
# paste plot to console
print(sctplt)
}
library(ggpubr)
ggarrange(plotlist = plots)
View(plots)
plots <- list()
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[paste(colnames(params)[j])]] <- sctplt
# paste plot to console
print(sctplt)
}
View(plots)
ggarrange(plotlist = plots)
?ggplotGrob
plots <- list()
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
# ggtitle(paste0("Parameter: ", colnames(params)[j])) +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name)
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[paste(colnames(params)[j])]] <- ggplotGrob(sctplt)
# paste plot to console
# print(sctplt)
}
ggarrange(plotlist = plots)
ggarrange(plotlist = plots, widths = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
# save grid of parameter scatter plots for each OF
ggarrange(plotlist = plots, widths = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
dev.off()
plots <- list()
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name) +
theme(axis.title = element_text(size = "15", color = "black"),
axis.text = element_text(size = 15))
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[paste(colnames(params)[j])]] <- ggplotGrob(sctplt)
# paste plot to console
# print(sctplt)
}
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
# save grid of parameter scatter plots for each OF
ggarrange(plotlist = plots, widths = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
dev.off()
SI <- results_sobol
library(lattice)
library(tools)
library(RColorBrewer)
for (k in 1:length(SI)) {
length(SI
)
k<-1
# subset sensitivty analysis results
with_conf <- SI[[k]]
with_conf
length(dim(with_conf)
)
value <- as.matrix(with_conf[, , 1])
print(levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col,
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis")))
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col,
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
View(value)
col <- colorRampPalette(brewer.pal(9, "PuBuGn"))
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col,
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col,cexRow=0.3,
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col, cexRow=1,
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col, xlab=list(cex=.05),
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
getwd()
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol)
portrait_plot(results_delta)
portrait_plot(results_ols)
levelplot(value, xlab = "Parameter", ylab = "Objective Function", col.regions = col, scales=list(x=list(cex=.3),y=list(cex=.3)), xlab=list(cex=.05),
ylab=list(cex=.25),
main = paste0("Portrait Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
library(fmsb)
SI
# subset sensitivty analysis results
with_conf <- SI[[k]]
value <- as.matrix(with_conf[, , 1])
n<-1
OF <- t(as.data.frame(value[, n]))
row.names(OF) <- "value"
# create max and min row to set boundaries
OF <- rbind(rep(max(OF["value",]), ncol(OF)), rep(min(OF["value",]), ncol(OF)) , OF)
row.names(OF) <- c("max", "min", "value")
# convert to data frame
OF <- as.data.frame(OF)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"))
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 15)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, palcex = 1.5)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, palcex = 1)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, palcex = 5)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, palcex = 0.5)
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
value
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, vlcex = 0.5)
2
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, vlcex = 2)
radarchart(OF, pcol = rgb(0.2, 0.5, 0.5, 0.9), pfcol = rgb(0.2, 0.5, 0.5, 0.5), plwd = 4, axistype = 1,
cglcol = "grey", cglty = 1, axislabcol = "grey", caxislabels = round(seq(min(OF), max(OF), length.out = 5), 3),
cglwd = 0.8, title = paste0(toupper(colnames(value)[n]), " Spider Plot for ", toTitleCase(dimnames(with_conf)[[3]][1])," Sensitivity Analysis"), calcex = 1.5, vlcex = 2, cex.main = 1.5)
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
# This script loads in data from Sobol, Delta, and OLS sensitivity analyses calculated in
# Python script for Case Study 0: Fall Creek, NY.
library(dplyr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol)
portrait_plot(results_delta)
portrait_plot(results_ols)
# spiders plots of objective functions versus parameter values
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
# This script loads in data from Sobol, Delta, and OLS sensitivity analyses calculated in
# Python script for Case Study 0: Fall Creek, NY.
library(dplyr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# scatterplots
par_OF_scatter <- function(params, objective_fun, OF_name) {
library(ggplot2)
library(wesanderson)
library(gridExtra)
# create a data frame of parameter values and the objective function values
data <- params
data[, "OF"] <- objective_fun
plots <- list()
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name) +
theme(axis.title = element_text(size = "15", color = "black"),
axis.text = element_text(size = 15))
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[paste(colnames(params)[j])]] <- ggplotGrob(sctplt)
# paste plot to console
# print(sctplt)
}
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
# save grid of parameter scatter plots for each OF
ggarrange(plotlist = plots, widths = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
dev.off()
}
# This script loads in data from Sobol, Delta, and OLS sensitivity analyses calculated in
# Python script for Case Study 0: Fall Creek, NY.
library(dplyr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
# "model_runs" rows, "num_pars" columns
OF <- read.csv("input/OF_values.csv", header = TRUE)
# "model_runs" rows, "num_OF" columns
# save names of objective functions and parameters
OF_names <- colnames(OF)
param_names <- colnames(pars)
# set variables of number of model runs, time steps, and number of parameters
model_runs <- nrow(pars)
num_pars <- ncol(pars)
num_OF <- ncol(OF)
# load in results from delta, sobol, and ols sensitivity analyses (calculated in python script)
source("../Scripts/python_to_r_results.R")
results_sobol <- python_to_r_results(data_type = "sobol", param_names, OF_names)
results_delta <- python_to_r_results(data_type = "delta", param_names, OF_names)
results_ols <- python_to_r_results(data_type = "ols", param_names, OF_names)
# save as csv files
lapply(results_sobol, function(x) write.table(data.frame(x), 'output/formatted_sobol.csv', append = T, sep = ',' ))
lapply(results_delta, function(x) write.table(data.frame(x), 'output/formatted_delta.csv', append = T, sep = ',' ))
lapply(results_ols, function(x) write.table(data.frame(x), 'output/formatted_ols.csv', append = T, sep = ',' ))
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# portrait plots of objective functions versus parameter values
source("../Scripts/portrait_plots.R")
portrait_plot(results_sobol)
portrait_plot(results_delta)
portrait_plot(results_ols)
# spiders plots of objective functions versus parameter values
source("../Scripts/spider_plots.R")
spiderplot(results_sobol)
spiderplot(results_delta)
spiderplot(results_ols)
objective_fun
OF_name
j<-1
for (j in 1:ncol(params)) {
print(j)
# create scatter plot of OF vs parameter
sctplt <- ggplot(data, aes(x = data[, j], y = OF)) +
geom_point(size = 1, colour = "#016c59") +
xlab(paste0(colnames(params)[j])) +
ylab(OF_name) +
theme(axis.title = element_text(size = "15", color = "black"),
axis.text = element_text(size = 15))
# save individual plot to output folder
# ggsave(paste0("output/plots/scatter/", colnames(params)[j], "_", OF_name, ".png"))
# save to list for gridded plot
plots[[paste(colnames(params)[j])]] <- ggplotGrob(sctplt)
# paste plot to console
# print(sctplt)
}
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 11, height = 8.5, units = 'in',res = 1000)
# save grid of parameter scatter plots for each OF
ggarrange(plotlist = plots, widths = c(ceiling(sqrt(ncol(params))), ceiling(ncol(params)/ceiling(sqrt(ncol(params))))))
dev.off()
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
# scatter plots of objective functions versus parameter values
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
source("../Scripts/scatterplots.R")
for (i in 1:num_OF) {
# subset by objective function, i
objective_fun <- OF[, i]
# create scatterplots of all parameters versus objective function, i
par_OF_scatter(params = pars, objective_fun, OF_name = colnames(OF)[i])
}
citation(package = "hydroGOF")
