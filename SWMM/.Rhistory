library(dataRetrieval)
library(data.table)
library(ggplot2)
library(foreach)
library(rwrfhydro)
library(lubridate)
library(latex2exp)
# Temp hardcoded input files
#FORCAST_PTS_FILE = "frxst_pts_out_2010-01_spinup.txt"
#ROUTE_LINK = "/Users/SDML/Box Sync/si/nwm/domains/tars/sipsey_wilderness_vanilla/Route_Link.nc"
FORCAST_PTS_FILE = "frxst_pts_out.txt"
ROUTE_LINK = "Route_Link.nc"
routeLink = ReadRouteLink(ROUTE_LINK)
forcast_pts = ReadFrxstPts(FORCAST_PTS_FILE)
# Extract NHDPlus link number from forcast pnts file
# Only one point supported at the moment
linkNo = trimws(forcast_pts$st_id[1])
# Get USGS gageID that matches link number in forcast
# points files from route link
gageID = routeLink[which(routeLink$link == linkNo), ]$site_no
# Delete routeLink -- just clutter at this point
rm(routeLink)
# Convert date cols to understandable R format
forcast_pts$dateTime <- ymd_hms(forcast_pts$timest)
# Note start and end date captured from forcast points files
# IF NOT REAL DATE OR USGS DATA DNE WILL CRASH
startDate = min(as_date(forcast_pts$dateTime))
endDate = max(as_date(forcast_pts$dateTime))
obsDF = readNWISuv(siteNumbers=gageID,
parameterCd="00060",
startDate=startDate,
endDate=endDate)
# Convert date cols to understandable R format
obsDF$dateTime <- ymd_hms(obsDF$dateTime)
# Create column of $\frac{m^3}{s}$
obsDF["q_cms"] <- obsDF$X_00060_00000 / 35.314666212661
# Add data to plot
plt <- ggplot(data = forcast_pts, aes(x=dateTime, y=q_cms)) +
geom_line(aes(color = 'NWM Simulated')) +
geom_line(data = obsDF, aes(color='Observed')) +
labs(title = "NWM Simulated vs Gauging Station",
subtitle = paste("USGS",gageID),
y=TeX("Q $(m^3/s)$"),
x="Time",
colour=" "
)
pl
# Temp hardcoded input files
FORCAST_PTS_FILE = "/Volumes/Seagate Backup Plus Drive/HydroInformatics/20190701/sipsey_wilderness_restart_run/frxst_pts_out.txt"
install.packages("dataRetrieval")
install.packages("data.table")
install.packages("ggplot2")
install.packages("foreach")
install.packages("rwrfhydro")
library(rwrfhydro)
install.packages("devtools")
devtools::install_github("NCAR/rwrfhydro")
library(devtools)
install.packages("devtools")
install.packages("png", "/home/user/anaconda3/lib/R/library")
library(data.table)
library(ggplot2, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(foreach, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(rwrfhydro, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(lubridate, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(latex2exp, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(dataRetrieval, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
View(forcast_pts)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
View(plt)
View(forcast_pts)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
View(obsDF)
View(forcast_pts)
View(obsDF)
View(forcast_pts)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
debugSource('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
debugSource('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
write.csv(obsDF, file = "/Users/catiefinkenbiner/Documents/Summer Institute/CaseStudies/Hydroinformatics/results/NWM_0.5.csv", row.names=FALSE, quote = FALSE)
source('~/Documents/Summer Institute/CODE/forecast_pnts_routelink.R', echo=TRUE)
#write.csv(obsDF, file = "/Users/catiefinkenbiner/Documents/Summer Institute/CaseStudies/Hydroinformatics/results/USGS_obs.csv", row.names=FALSE, quote = FALSE)
write.csv(forecast_pts, file = "/Users/catiefinkenbiner/Documents/Summer Institute/CaseStudies/Hydroinformatics/results/NWM_0.7.csv", row.names=FALSE, quote = FALSE)
#write.csv(obsDF, file = "/Users/catiefinkenbiner/Documents/Summer Institute/CaseStudies/Hydroinformatics/results/USGS_obs.csv", row.names=FALSE, quote = FALSE)
write.csv(forcast_pts, file = "/Users/catiefinkenbiner/Documents/Summer Institute/CaseStudies/Hydroinformatics/results/NWM_0.7.csv", row.names=FALSE, quote = FALSE)
install.packages("hydroGOF")
library(hydroGOF)
library(hydroGOF)
#' @param output Vector of output types to be read (e.g., "Head", "Moisture", "Flux")
#' Default is NULL, meaning all the outputs is read.
#' @param warn Should the warning of coercion of character to NA be shown
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
#'
read.nod_inf<- function(project.path, out.file = "Nod_Inf.out", output = NULL, warn = FALSE, ...){
if(is.null(output) | missing(output)) {
output = c("Head", "Moisture", "K", "C", "Flux",
"Sink", "Kappa", "v/KsTop", "Temp")
}
options(warn = -1)
if(warn == TRUE) options(warn = 0)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[["Node"]]), ]
times = c(0, as.numeric(time_lines$Depth))
# dup_times_index = which(duplicated(times))
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
# nod_inf[, colnames(nod_inf) := lapply(.SD, as.numeric), .SDcols = colnames(nod_inf)]
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
nod_inf[, Time:= rep(times, each = length(nodes))]
nod_split = split(nod_inf, f = nod_inf$Time)
nrow_split = sapply(nod_split, nrow)
extra_index = which(nrow_split > length(nodes))
for(i in extra_index){
nod_split[[i]] = nod_split[[i]][1:length(nodes), ]
}
nod_inf =  rbindlist(nod_split)
output_names = intersect(output, colnames(nod_inf))
output_names = c("Time", "Node", "Depth", output_names)
# dropped_cols = colnames(nod_inf)[!(colnames(nod_inf) %in% output_names)]
nod_out = nod_inf[, .SD, .SDcols = output_names]
# node_out<- data.frame(Node = nod_inf$Node,
#                       Depth = as.numeric(nod_inf$Depth),
#                       nod_inf[, output_names], check.names = FALSE)
# names(node_out) = c("Node", "Depth", output_names)
# node_out = as.data.frame(na.omit(node_out), row.names = NULL, check.names = FALSE)
# nodes = unique(node_out$Node)
# node_out = data.frame(Time = rep(times, each = length(nodes)), node_out,
#                       row.names = NULL, check.names = FALSE)
options(warn = 0)
return(nod_out)
}
pwd
read.nod_inf(/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
install.packages("set")
library(set)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
library(set)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
install.packages("set")
install.packages("set")
library(do)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
install.packages("set")
install.packages("do")
install.packages("do")
library(do)
library(devtools, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(iterators, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(plyr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(sys, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
remove.packages("set")
install.packages("set",‘/Users/catiefinkenbiner/Library/R/3.6/library’)
install.packages("set","/Users/catiefinkenbiner/Library/R/3.6/library)
install.packages("set","/Users/catiefinkenbiner/Library/R/3.6/library")
install.packages("set")
install.packages("do")
install.packages("do")
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
library(set)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
output = c("Head", "Moisture", "K", "C", "Flux",
"Sink", "Kappa", "v/KsTop", "Temp","Conc(1..NS)","Sorb(1...NS)")
View(read.nod_inf)
read.nod_inf("/Volumes/Seagate Backup Plus Drive/New_IsoHydrus_HJA/Boulder/dual_porosity_domain/DPorD_simple_ts44")
install.packages(c("devtools", "dplyr", "sys"), lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(dplyr)
library(ggpubr)
library(hydroGOF)
library(png)
library(lattice, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(tools, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RColorBrewer, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages(c("dplyr", "ggrepel", "hydroGOF", "hydroTSM", "set"))
library(dplyr)
library(gridExtra)
library(magrittr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(png)
library(jpeg, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(png, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(ggpubr)
library(hydroGOF)
prop.table(tab)    # view table of outcome proportions
prop.table(tab)    # view table of outcome proportions
beads <- rep(c("red", "blue"), times = c(2,3))    # create an urn with 2 red, 3 blue
beads    # view beads object
sample(beads, 1)    # sample 1 bead at random
B <- 10000    # number of times to draw 1 bead
events <- replicate(B, sample(beads, 1))    # draw 1 bead, B times
tab <- table(events)    # make a table of outcome counts
tab    # view count table
prop.table(tab)    # view table of outcome proportions
install.packages("BiocManager")
# 1) install some prerequsites:
# if running for the first time, you'll need a few packages specific to this workflow
# check to see if packages are installed first:
if (!("rhdf5" %in% rownames(installed.packages()))) {
if (!("BiocManager" %in% rownames(installed.packages()))) {
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
demo()
update
update()
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Suki')
install.packages("BiocManager")
if(!("devtools" %in% rownames(installed.packages()))) {
install.packages("devtools")
}
e uncalibrated data in
#						 sites = 'ONAQ') # specify site(s) of interest
#                                        # multiple sites can be submitted as a
# 1) install some prerequsites:
# if running for the first time, you'll need a few packages specific to this workflow
# check to see if packages are installed first:
if (!("rhdf5" %in% rownames(installed.packages()))) {
if (!("BiocManager" %in% rownames(installed.packages()))) {
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
if(!("devtools" %in% rownames(installed.packages()))) {
install.packages("devtools")
}
if (!("rhdf5" %in% rownames(installed.packages()))) {
if (!("BiocManager" %in% rownames(installed.packages()))) {
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
if(!("devtools" %in% rownames(installed.packages()))) {
install.packages("devtools")
}
if(!("tidyverse" %in% rownames(installed.packages()))) {
install.packages("tidyverse")
}
if(!("neonUtilities" %in% rownames(installed.packages()))) {
install.packages("neonUtilities")
}
# install development branch of the package
devtools::install_github('SPATIAL-Lab/NEONiso',
ref = 'main',
build_vignettes = TRUE, force = TRUE)
library(NEONiso)
#-------------------------------------------------------------------
# OPTIONAL: there's a chance R may complain about not being
# able to find rhdf5 (it's not on CRAN). if this is the case, try this:
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
# check to make sure the vignette is available
vignette('example_workflow', package = 'NEONiso')
your_path <- '~/Desktop/test/' # set a path where data will be saved on your computer
manage_local_EC_archive(file_dir = your_path, get = TRUE, unzip_files = TRUE, sites = "ONAQ") # this will take several minutes,
#check your path after this has finished running - are there a series of (monthly) hdf5 files for ONAQ?
# if so, try calibrating data:
fnames <- list.files(path = paste0(your_path,'/ONAQ'),
pattern = '.h5',
recursive = TRUE,
full.names = TRUE)
# unselect gz files.
fnames <- fnames[!grepl('.gz',fnames)]
fname.byfolder <- strsplit(fnames, split=".", fixed = TRUE)
site.code  <- sapply(fname.byfolder,'[[',3)
fnames.tmp <- gsub(".h5",".calibrated.h5",fnames)
fnames.spt <- strsplit(fnames.tmp, split = "/")
fnames.out <- sapply(fnames.spt, '[[', 7)
# create new output directory
outpaths   <- paste0(your_path,'/ONAQ/output/')
sapply(unique(outpaths),dir.create,showWarnings=FALSE) # apply function used here to generalize in case you wanted to run all sites
# update fnames.out to include desired output paths.
fnames.out <- paste0(outpaths,"/",fnames.out)
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
your_path <- '~/Desktop/test' # set a path where data will be saved on your computer
# create new output directory
outpaths   <- paste0(your_path,'/ONAQ/output/')
sapply(unique(outpaths),dir.create,showWarnings=FALSE) # apply function used here to generalize in case you wanted to run all sites
# update fnames.out to include desired output paths.
fnames.out <- paste0(outpaths,"/",fnames.out)
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
your_path <- '~/Desktop/test/' # set a path where data will be saved on your computer
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
library(rhdf5)
library(rhdf5filters)
library(Rhdf5lib)
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
library(R.utils)
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
h5closeAll()
# try calibrating data:
for (i in 1:length(fnames.out)) {
calibrate_carbon_bymonth(fnames[i], fnames.out[i], site=site.code[i], method = "Bowling_2003")
}
install.packages(c("ggpubr", "wesanderson"))
png(paste0("output/plots/scatter/", OF_name, ".png"), width = 17, height = 11, units = 'in',res = 1000)
debugSource('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/Scripts/scatterplots.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/Scripts/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
cd
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
cd
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(wesanderson)
library(gridExtra)
library(ggpubr)
# load in objective function values and parameter sets
pars <- read.csv("input/params.csv", header = TRUE)
OF <- read.csv("input/OF_values.csv", header = TRUE)
library(openxlsx)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
getwd()
setwd("/Users/catiefinkenbiner/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/")
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
View(pars)
pars["A1"]
View(pars)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
View(OF)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
data
View(data)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
data <- pars["A1","B1"]
data
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
View(data)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
View(data)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
j
data[, 1]
data[, 0]
data[, 2]
View(data)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
source('~/Documents/Summer Institute NWC/Hydro_Parameter_Sensitivity_Visuals/SWMM/jawra_figures.R', echo=TRUE)
